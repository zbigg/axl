<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>AXL - dokumentacja</TITLE>
<META content="text/html; charset=windows-1250" http-equiv=Content-Type>
<META content="Zbigniew Zagórski, Strona domowa" name=Keywords>
<META content="Zbigniew Zagórski" name=author></HEAD>
<BODY><BR>
<DIV class=tekst>
<H1>AXL - dokumentacja</H1>
<P>Data modyfikacji : 10-03-2003<BR>Wersja: 0.1-9<BR>
<H2>Zawartoœæ</H2><A name=toc>
<UL>
  <LI><A href="#chapter_1">1. 
  Wprowadzenie</A> 
  <LI><A href="#chapter_2">2. Sk³adnia</A> 
  <UL>
    <LI><A href="#sect_2_1">2.1 Program</A> 
    <LI><A href="#sect_2_2">2.2 
    Instrukcja</A> 
    <LI><A href="#sect_2_3">2.3 Instrukcja 
    specjalna</A> 
    <LI><A href="#sect_2_4">2.4 
    Wyra¿enie</A> 
    <LI><A href="#sect_2_5">2.5 Konwencje 
    leksykalne</A> </LI></UL>
  <LI><A href="#chapter_3">3. Dzia³anie 
  programu</A> 
  <UL>
    <LI></LI></UL>
  <LI><A href="#chapter_4">4. Biblioteka 
  standardowa</A> 
  <UL>
    <LI><A href="#sect_4_1">4.1 IO</A> 
    <LI><A href="#sect_4_2">4.2 SYSTEM</A> 
    </LI></UL>
  <LI><A href="#chapter_5">5. Przyk³ady</A> 
  </LI></UL></DIV>
<H1><A name=chapter_1>1.</A> Wprowadzenie</H1>
<DIV class=tekst>
<H3><A name=sect_1_1>1.1</A> Pierwotne za³o¿enia, historia itp</H3>
<P>Biblioteka AXL na pocz¹tku projektowana by³a w celu u³atwienia tworzenia 
dynamicznie generowanych stron internetowych. Oczywiœcie pomys³ nie by³ nowy. 
Istnia³y ju¿ min. SSI, PHP czy nawet Perl (w tym przypadku trudno mówiæ o 
u³atwieniu). Pierwotnym wiêc wymaganiem wobec parsera by³o formatowanie 
dokumentu na podstawie wzorca, np: <PRE>        &lt;TITLE&gt;<I>$<B>document.title</B>;</I>&lt;/TITLE&gt;
czy
        &lt;A HREF="<I>$<B>link.address</B>;</I>"&gt; <I>$<B>link.description</B>;</I> &lt;/A&gt;
</PRE>
<P>Wiêc pierwsz¹ rzecz¹ jak¹ zimplementowa³em to parser dokumentu który ka¿d¹ 
sekwencjê <CODE><B>$</B> <I>expr</I> <B>;</B></CODE> zamienia na wartoœæ tego¿ 
wyra¿enia. Dodatkowo <CODE><B>%</B> instr <B>;</B></CODE> wykonuje zadana 
instrukcje bez wypisywania ¿adnej wartoœci. 
<P>Nastêpnym krokiem by³o zbudowanie porz¹dnego parsera za pomoc¹ Yacc'a, 
poprzedni by³ pisany rêcznie i nie posiada³ nawet operatorów. Teraz jêzyk nabra³ 
wyraŸnych kszta³tów. Wiêc sk³adnia instrukcji, wyra¿eñ i znaczenie operatorów 
jest wzorowana na jêzyku C. Ró¿nica polega na deklarowniu i u¿yciu zmiennych, 
funkcji i obiektów i fakcie, ¿e skrypt (program) uruchamiany jest sekwencyjnie, 
czyli od pierwszej linijki do ostatniej. 
<P>
<p>
<H1><A name=chapter_2>2.</A> Sk³adnia</H1>
<DIV class=tekst>
<P>Ten rozdzia³ zawiera dok³adny opis sk³adni jêzyka. Oczywiœcie na razie 
niekompletny. 
<H2><A name=sect_2_1>2.1</A> Program</H2>
<P>Program sk³ada siê z ci¹gu instrukcji zakoñczonych jednym œrednikiem 
wykonywanych w sposób sekwencyjny. 
<P>Sk³adnia: <PRE><I>program</I> : /* empty */
        | <I>program instrukcja</I> <B>;</B>
        | <I>program</I> <B>include</B> <I>TEXT</I> <B>;</B>
        ;
</PRE>
<UL>
  <LI><A name=desc_program>2.1.1</A> <B>program</B><BR>
  <LI><A name=desc_include>2.1.2</A> <B>include</B><BR>Instrukcja 
  <CODE><B>include "</B>nazwa<B>"</B></CODE> w³¹cza plik o zadanej nazwie zaraz 
  za œrednikiem.<BR>Instrukcja w³¹czaj¹ca tekst pliku mo¿e znajdowaæ siê tylko w 
  kontekscie globalnym lub w bloku. Nie mo¿e siê znajdowaæ w instrukcji <A 
  href="#desc_if">if</A>, <A 
  href="#desc_if_else">if/else</A>, <A 
  href="#desc_do_while">do/while</A>, <A 
  href="http://192.168.1.2/~trurl/desc_do_if">do/if</A> jako pojedycza 
  instrukcja. </LI></UL>
<H2><A name=sect_2_2>2.2</A> Instrukcja</H2>
<P>Instrukcja mo¿e byæ wyra¿eniem, blokiem instrukcji lub instrukcj¹ specjaln¹. 
<P>Sk³adnia: <PRE><I>instrukcja</I>
        : <I>wyrazenie</I>
        | <I>blok</I>
        | <I>instrukcja_specjalna</I>
        ;
<I>instrukcje</I>
        : /* empty */
        | <I>instrukcje</I> <I>instrukcja</I> <B>;</B>
        | <I>instrukcje</I> <B>include</B> <I>TEXT</I> <B>;</B>
        ;
<I>blok</I>
        : <B>{</B> <I>instrukcje</I> <B>}</B>
        ;
</PRE>
<UL>
  <LI><A href="#desc_include">include</A> 
  <LI><A href="#desc_text">TEXT</A> 
  <LI><A name=desc_instrukcja>2.2.1</A> <B>instrukcja</B><BR>
  <LI><A name=desc_blok>2.2.2</A> <B>blok</B><BR></LI></UL>
<H2><A name=sect_2_3>2.3</A> Instrukcja specjalna</H2>
<P>Instrukcja specjalna to jedna z: <A 
href="#desc_if">if</A>, <A 
href="#desc_if_else">if/else</A>, <A 
href="#desc_while">while</A>, <A 
href="#desc_do_while">do/while</A>, <A 
href="#desc_switch">switch</A>; 
<P>Sk³adnia:<PRE><I>instrukcja_specjalna</I>
        : <B>if (</B> <I>wyrazenie</I> <B>)</B> <I>instrukcja</I>
        | <B>if (</B> <I>wyrazenie</I> <B>)</B> <I>instrukcja</I> <B>else</B> <I>instrukcja</I>
        | <B>for (</B> <I>wyrazenie</I> <B>;</B> <I>wyrazenie</I> <B>;</B> <I>wyrazenie</I> <B>)</B> <I>wyrazenie</I>
        | <B>while (</B> <I>wyrazenie</I> <B>)</B> <I>instrukcja</I> 
        | <B>do</B> <I>instrukcja</I> <B>while (</B> <I>wyrazenie</I> <B>)</B>
        | <B>return</B> <I>wyrazenie</I>
        | <B>echo</B> <I>lista_wyrazen_niepusta</I>
        | <B>switch (</B> wyrazenie <B>) {</B> <I>przypadek</I> <B>}</B>
        | <B>global</B> <I>wyrazenie</I>
        ;
<I>przypadek</I>    
        : /* empty */
        | wyrazenie_case <B>-&gt;</B> instrukcja <B>;</B> przypadek
        | <B>default</B> <B>-&gt;</B> instrukcja <B>;</B>
        ;
<I>wyrazenie_case</I>
        : <I>wyrazenie</I> 
        | <I>CMP_OPER wyrazenie</I>
        ;
</PRE>
<UL>
  <LI><A href="#desc_cmp_oper">CMP_OPER</A> 
  <LI><A name=desc_if>2.3.1</A> <B>if</B><BR><CODE><B>if (</B> <I>warunek</I> 
  <B>)</B> <I>instT</I></CODE><BR>Instrukcja warunkowa <B>if</B> jest wykonywana 
  w nastêpuj¹cy sposób: 
  <UL>
    <LI>opracowane jest wyrazenie <I>warunek</I> i sprawdzone czy jego wartoœc 
    jest ro¿n¹ od zera 
    <LI>w przypadku twierdz¹cym wykonuje siê instrukcjê <I>instT</I> </LI></UL>
  <LI><A name=desc_if_else>2.3.2</A> <B>if/else</B><BR><CODE><B>if (</B> 
  <I>warunek</I> <B>)</B> <I>instT</I> <B>else</B> 
  <I>instF</I></CODE><BR>Instrukcja warunkowa <B>if/else</B> jest wykonywana w 
  nastêpuj¹cy sposób: 
  <UL>
    <LI>opracowane jest wyrazenie <I>warunek</I> i sprawdzone czy jego wartoœc 
    jest ro¿n¹ od zera 
    <LI>w przypadku twierdz¹cym wykonuje siê instrukcjê <I>instT</I> 
    <LI>w przypadku przecz¹cym wykonuje siê instrukcjê <I>instF</I> </LI></UL>
  <LI><A name=desc_for>2.3.3</A> <B>for</B><BR><CODE><B>for (</B> <I>wyrS</I> 
  <B>;</B> <I>warunek</I> <B>;</B> <I>wyrI</I> <B>)</B> 
  <I>instP</I></CODE><BR>Instrukcja iteracyjna <B>for</B> wykonywana jest w 
  nastêpuj¹cy sposób: 
  <UL>
    <LI>1. wykonywana jest inetukcja <I>wyrS</I> 
    <LI>2. opracowuje siê wyra¿enie <I>warunek</I> i sprawdza siê czy jest ró¿ne 
    od zera 
    <LI>3. w przypadku przecz¹cym nasêpuje wyskoczenie z pêtli 
    <LI>4. w przypadku twierdz¹cym wykonywana jest instrukcja <I>instP</I>, 
    opracowuje siê wyra¿enie <I>wyrI</I> a nastêpnie wykonywany jest skok do 
    punktu 2 </LI></UL>Instrukcja <CODE>for( a ; b ; c ) d</CODE> jest równowa¿na 
  instrukcji<PRE>{
        a;
        while( b ) {
                d;
                c;
        };
}
</PRE>
  <LI><A name=desc_while>2.3.4</A> <B>while</B><BR><CODE><B>while (</B> 
  <I>warunek</I> <B>)</B> <I>instP</I> </CODE><BR>Instrukcja iteracyjna 
  <B>while</B> wykonywana jest w nastêpuj¹cy sposób: 
  <UL>
    <LI>1. opracowuje siê wyra¿enie <I>warunek</I> i sprawdza siê czy jest ró¿ne 
    od zera 
    <LI>2. w przypadku przecz¹cym nasêpuje wyskoczenie z pêtli 
    <LI>3. w przypadku twierdz¹cym wykonywana jest instrukcja <I>instP</I>, 
    opracowuje siê wyra¿enie a nastêpnie wykonywany jest skok do punktu 1 
  </LI></UL>
  <LI><A name=desc_do_while>2.3.5</A> <B>do_while</B><BR><CODE><B>do</B> 
  <I>instP</I> <B>while (</B> <I>warunek</I> <B>)</B></CODE><BR>Instrukcja 
  iteracyjna <B>do/while</B> wykonywana jest w nastêpuj¹cy sposób: 
  <UL>
    <LI>1. wykonuje siê instrukcjê <I>instP</I> 
    <LI>2. opracowuje siê wyra¿enie <I>warunek</I> i sprawdza siê czy jest ró¿ne 
    od zera 
    <LI>3. w przypadku przecz¹cym nasêpuje wyskoczenie z pêtli 
    <LI>4. w przypadku twierdz¹cym wykonywany jest skok do punktu 1 </LI></UL>
  <LI><A name=desc_return>2.3.6</A> <B>return</B><BR><CODE><B>return</B> 
  <I>wartZ</I></CODE><BR>Instrukcja <B>return</B> powoduje powrót z funkcji lub 
  metody wraz ze zwróceniem wartoœci <I>wartZ</I>. <BR>Instrukcja <B>return</B> 
  mo¿e wyst¹piæ tylko i wy³¹cznie w ciele funkcji. <BR>Je¿eli w ciele funkcji 
  nie wystêpuje instrukcja return lub nastêpuje powrót z funkcji spowodowany 
  zakoñczeniem jej kodu zwracana jest wartoœæ <I>NIL</I>. <BR>Zwracanie z 
  funkcji nastêpuje przez wartoœæ. Nie mo¿na zwaracaæ przez referencje zmiennych 
  prostych, jedynie obiekty. 
  <LI><A name=desc_echo>2.3.7</A> <B>echo</B><BR><CODE><B>echo</B> 
  <I>listaW</I></CODE><BR>Instrukcja <B>echo</B> powoduje opracowanie ka¿dego z 
  wyra¿eñ w liscie <I>listaW</I> w kolejnoœci od lewej do prawej, a nastêpnie 
  wypisanie ich tekstowej reprezentacji na standardowe wyjœcie.<BR>
  <LI><A name=desc_switch>2.3.8</A> <B>switch</B><BR><CODE><B>switch (</B> wyrW 
  <B>) {</B> <I>przypW</I> <B>}</B></CODE><BR><I>przypadek</I>: <I>wyrazenie</I> 
  <B>-&gt;</B> <I>instP</I> <B>;</B><BR><I>przypadek</I>: <I>CMP_OPER 
  wyrazenie</I> <B>-&gt;</B> <I>instP</I> <B>;</B><BR>Instrukcja <B>switch</B> 
  wykonywana jest w nastêpuj¹cy sposób: 
  <UL>
    <LI>opracowywane jest wyra¿enie <I>wyrW</I> i umieszczane w zmiennej 
    <B>case</B> 
    <LI><I>brak inwencji autora, patrz przyk³ad</I> </LI></UL>Przyk³ad: instrukcja 
<PRE><B>switch</B>( e ) {
        <B>==</B> 0 -&gt; inst0 <B>;</B>
        <B>case</B> <B>==</B> 2 <B>||</B> <B>case</B> <B>==</B> 3 <B>-&gt;</B> inst1 <B>;</B>
        war2 -&gt; inst2 <B>;</B>
        war3 -&gt; inst3 <B>;</B>
        war4 -&gt; inst4 <B>;</B>
        /* ... */
        warn -&gt; instn <B>;</B>
        <B>default</B> -&gt; instD <B>;</B>    
}
</PRE>jest równowa¿na: <PRE><I>my_case</I> = e;
        <B>if</B>( <I>my_case</I> <B>==</B> 0 ) <I>inst0</I>
<B>else if</B>( <I>my_case</I> == 2 || <I>my_case</I> == 3 ) <I>inst1</I>
<B>else if</B>( <I>war3</I> ) <I>inst2</I> 
<B>else if</B>( <I>war4</I> ) <I>inst2</I> 
/* ... */
<B>else if</B>( <I>warn</I> ) <I>instn</I>
<B>else</B> <I>instD</I>
</PRE>
  <LI><A name=desc_global_i>2.3.9</A> <B>global</B><BR><CODE><B>global</B> 
  <I>ob0</I></CODE><BR>Instruckja <B>global</B> powoduje utworzenie kontekstu 
  bezpoœrednio pod kontekstem globalnym z identyfikatorami to¿samymi z polami 
  obiektu <I>ob0</I><BR>Przyk³ad: <PRE>obj = <B>new</B>;
<B>global</B> obj;
obj.member = <I>"abc"</I>;
member <I>jest tym samym obiektem co</I> obj.member
</PRE></LI></UL>
<H2><A name=sect_2_4>2.4</A> Wyra¿enie</H2>
<P>Wyra¿enie przedstawia konkretn¹ wartoœæ. Wartoœæ mo¿e byæ natychmiastowa 
"<I>ival</I>" lub referencyjna "<I>rval</I>". <I>Rval</I> to taka która wskazuje 
na zmienn¹ i która mo¿e byæ zmieniona, <I>ival</I> nie mo¿e byæ zmieniona. 
<P>Wyra¿enie sk³ada siê z wartoœci po³¹czonych ró¿nymi operatorami. Ka¿dy 
operator wykonuje pewne operacje na swoich argumentach i zwraca w wyniku inn¹ 
lub t¹ sam¹ wartoœæ. 
<H3><A name=desc_expr_ival>2.4.1</A> Wartoœci natychmiastowe <I>ival</I></H3>
<P>
<H3><A name=desc_expr_rval>2.4.2</A> Wartoœci referencyjme <I>rval</I></H3>
<P>
<H3><A name=desc_expr_oper_arith>2.4.3</A> Operatory arytmetyczne</H3>
<P><PRE>        + - * / %
</PRE>
<UL>
  <LI>SUMA:<BR><CODE>ival_L <B>+</B> ival_R</CODE> <BR>Sumuje siê wartoœci 
  ival_L i ival_R zwracaj¹c wynik. 
  <LI>RÓ¯NICA:<BR><CODE>ival_L <B>-</B> ival_R</CODE> <BR>Odejmuje siê wartoœci 
  ival_L i ival_R zwracaj¹c wynik. 
  <LI>ZMIANA ZNAKU:<BR><CODE><B>-</B> ival</CODE> <BR>Zwracana jest wartoœæ ival 
  ze zmienionym znakiem. 
  <LI>ILOCZYN:<BR><CODE>ival_L <B>*</B> ival_R</CODE> <BR>Mno¿y siê wartoœci 
  ival_L i ival_R zwracaj¹c wynik. 
  <LI>ILORAZ:<BR><CODE>ival_L <B>/</B> ival_R</CODE> <BR>Dzieli siê ival_L przez 
  ival_R zwracaj¹c wynik. 
  <LI>MODULO: <CODE>ival_L <B>%</B> ival_R</CODE> <BR>Zwraca siê resztê 
  dzielenia ival_L przez ival_R 
  <LI>Wszystkie operatory arytmetyczne maj¹ lewe wi¹zanie czyli: <CODE>a + b + c 
  </CODE>jest rownowa¿ne: <CODE>( a + b ) + c </CODE>. 
  <LI>Sumowanie lub konkatenacja wartoœæi opisana jest w rozdziale nt. dzia³ania 
  programu, pp. <A href="#run_summ">suma i 
  konkatenacja</A>. 
  <LI>Operatory ró¿nicy,zmiany znaku, mno¿enia, dzielenia. Dokonywane s¹ na 
  wystarczaj¹cym do wykonania operacji zbiorze liczbowym ca³kowitym lub 
  zmiennoprzecinkowym. Patrz dzia³anie programu <A 
  href="#run_arith">operacje 
  arytmetyczne</A>. </LI></UL>
<H3><A name=desc_expr_oper_logic>2.4.4</A> Operatory logiczne</H3>
<P><PRE>        &amp; | ^ ~ &amp;&amp; || ^^ !
</PRE>
<UL>
  <LI>ILOCZYN BITOWY:<BR><CODE>ival_L <B>&amp;</B> ival_R</CODE> <BR>&nbsp; 
  <LI>SUMA BITOWA:<BR><CODE>ival_L <B>|</B> ival_R</CODE> <BR>&nbsp; 
  <LI>WY£¥CZNA SUMA BITOWA:<BR><CODE>ival_L <B>^</B> ival_R</CODE> <BR>&nbsp; 
  <LI>NEGACJA BITOWA:<BR><CODE><B>~</B> ival</CODE> <BR>&nbsp; 
  <LI>ILOCZYN LOGICZNY:<BR><CODE>ival_L <B>&amp;&amp;</B> ival_R</CODE> 
  <BR>&nbsp; 
  <LI>SUMA LOGICZNA:<BR><CODE>ival_L <B>||</B> ival_R</CODE> <BR>&nbsp; 
  <LI>WY£¥CZNA SUMA LOGICZNA:<BR><CODE>ival_L <B>^^</B> ival_R</CODE> <BR>&nbsp; 

  <LI>NEGACJA LOGICZNA:<BR><CODE><B>!</B> ival</CODE> <BR>&nbsp; 
  <LI>Operatory sumy logicznej i iloczynu logicznego maj¹ lewe wi¹zanie czyli: 
  <CODE>a &amp; b &amp;c</CODE> jest równowa¿ne: <CODE>( a &amp; b ) &amp; c 
  </CODE>. Wszystkie inne operatory logiczne i binarne maj¹ lewe wi¹zanie czyli: 
  <CODE>a | b | c </CODE>jest rownowa¿ne: <CODE>( a | b ) | c </CODE>. 
  <LI>Operatory bitowe dzia³aj¹ na liczbach ca³kowitych. Przed obliczniem 
  dokonywana jest stosowna konwersja do liczby ca³kowitej. 
  <LI>Operarory logiczne dzia³aj¹ na wartoœciach logicznych. Patrz <A 
  href="#run_bool">konwersja do wartoœci 
  logicznych</A>. 
  <LI>Operatory sumy logicznej i iloczynu logicznego obliczaj¹ <U>tylko i 
  wy³¹cznie</U> tyle wyra¿eñ wejœciowych ile jest potrzebnych do ustalenia 
  wyniku.<BR>Przyk³ad <PRE>        2 || f()        // wyrazenie f() nie jest obliczane, funkcja
                        // f. nie jest wywolana
        0 &amp;&amp; f()        // wyrazenie f() nie jest obliczane, funkcja
                        // f. nie jest wywolana
        if( f() ) if( g() ) { ... } // jest równowa¿na instrukcji :
	if( f() &amp;&amp; g() ) { ... }
</PRE></LI></UL>
<P>
<H3><A name=desc_cmp_oper><A name=desc_expr_oper_comp>2.4.5</A> Operatory 
porównania</A></H3>
<P><PRE>        == != &lt; &gt; &lt;= &gt;=
</PRE>
<UL>
  <LI>RÓWNOŒÆ:<BR><CODE>ival_L <B>==</B> ival_R</CODE> <BR>&nbsp; 
  <LI>RÓ¯NE:<BR><CODE>ival_L <B>!=</B> ival_R</CODE> <BR>&nbsp; 
  <LI>MNIEJSZE:<BR><CODE>ival_L <B>&lt;</B> ival_R</CODE> <BR>&nbsp; 
  <LI>WIÊKSZE:<BR><CODE>ival_L <B>&gt;</B> ival_R</CODE> <BR>&nbsp; 
  <LI>MNIEJSZE RÓWNE:<BR><CODE>ival_L <B>&lt;=</B> ival_R</CODE> <BR>&nbsp; 
  <LI>WIÊKSZE RÓWNE:<BR><CODE>ival_L <B>&gt;=</B> ival_R</CODE> <BR>&nbsp; 
  <LI>Wszystkie operatory porónania zwracaj¹ wartoœæ logiczn¹ 0 - fa³sz lub 1 - 
  prawda. 
  <LI>Wszystkie operatory porównania lewe wi¹zanie czyli: <CODE>a &gt; b &gt; c 
  </CODE>jest rownowa¿ne: <CODE>( a &gt; b ) &gt; c </CODE>. </LI></UL>
<H3><A name=desc_expr_oper_set>2.4.6</A> Operatory przypisania</H3>
<P><PRE>        = += -= *= /= |= &amp;= ?= &lt;&gt;
</PRE>
<UL>
  <LI>PRZYPISANIE:<BR><CODE>rval_R <B>=</B> ival_E</CODE> <BR>Przypisz 
  <I>ival_E</I> do <I>rval_R</I>. 
  <LI>DODAJ DO:<BR><CODE>rval_R <B>+=</B> ival_E</CODE> <BR>&nbsp; 
  <LI>ODEJMIJ OD:<BR><CODE>rval_R <B>-=</B> ival_E</CODE> <BR>&nbsp; 
  <LI>POMNÓ¯ PRZEZ:<BR><CODE>rval_R <B>*=</B> ival_E</CODE> <BR>&nbsp; 
  <LI>PODZIEL PRZEZ:<BR><CODE>rval_R <B>/=</B> ival_E</CODE> <BR>&nbsp; 
  <LI>DODAJ DO LOGICZNIE:<BR><CODE>rval_R <B>|=</B> ival_E</CODE> <BR>&nbsp; 
  <LI>POMNÓ¯ PRZEZ LOGICZNIE:<BR><CODE>rval_R <B>&amp;=</B> ival_E</CODE> 
  <BR>&nbsp; 
  <LI>PRZYPSANIE JEŒLI NIL:<BR><CODE>rval_R <B>?=</B> ival_E</CODE> <BR>&nbsp; 
  <LI>Wszystkie operatory przypisania zwracaj¹ referencjê na zmienn¹ docelow¹. 
  <LI>Wszystkie operatory przypisania maj¹ prawe wi¹zanie czyli: <CODE>a = b = c 
  </CODE>jest rownowa¿ne: <CODE>a = ( b = c ) </CODE>. </LI></UL>
<P>
<H3><A name=desc_expr_oper_select>2.4.7</A> Operatory wyboru</H3>
<P><PRE>        . []
</PRE>
<P>
<H3><A name=desc_expr_oper_spec>2.4.8</A> Operatory specjalne</H3>
<P><PRE>        ?: new copy delete ewhile efor eswitch
<P></P></PRE>
<H3><A name=desc_expr_func_call>2.4.8</A> Wywo³ywanie funkcji</H3>
<P>
<P>Sk³adnia: <PRE><I>wywolanie</I>
        : rval_f <B>(</B> <I>parametry</I> <B>)</B> 
        ;
<I>parametry</I>
        : /* empty */
        | <I>parametry</I> <B>,</B> <I>parametr</I>
	| <I>parametr</I> 
        ;
<I>parametr</I>
        :         <I>wyrazenie</I>
        | <B>&amp;</B><I>wyrazenie</I>
        ;
</PRE>
<P>Wywo³anie funkcji okreœlonej przez <I>rval_f</I> z parameterami P. Wyra¿enia 
opracowane s¹ opracowane w kolejnoœci od lewej do prawej. Iloœæ parametrów mo¿e 
byæ równa 0. <BR>Je¿eli parametrem wyra¿enia jest referencja - czyli jakakolwiek 
zmienna; do funkcji przekazywana jest jedynie wartoœæ. Aby przekazaæ do funkcji 
zmienn¹ i móc zmieniaæ jej zawartoœæ w ciele funkcji; stosujemy przekazywanie 
parametry przez referencje poprzedzaj¹c go znakiem <B>&amp; </B>
<DIV class=tekst><A 
href="#toc">Zawartoœæ</A> </DIV>



<H2><A name=sect_2_5>2.5</A> Konwencje leksykalne</H2>


<H3><A name=desc_comment>2.5.1</A> Komentarze</H3>
<UL>
  <LI>tekst za znakiem <B>#</B> (hash) lub za sekwencj¹ <B>//</B> pomijany jest 
  do koñca aktualnej linii 
  <LI>ca³y tekst pomiêdzy sekwencjami <B>/*</B> i <B>*/</B> jest pomijany 
</LI></UL>
<H3><A name=desc_number>2.5.2</A> Sta³e liczbowe</H3>
<P>Sta³¹ liczbow¹ jest ci¹g cyfr i znaków alfanumerycznych ewentualnie 
poprzedzony wielkoœci¹ bazy syetemu liczbowego: Sk³adnia: <PRE><I>stala_liczbowa</I>
        : <I>liczba_calkowita</I>
        | <I>liczba_calkowika</I> <B>#</B> <I>liczba_alfanumeryczna</I>
        | <B>0X</B> <I>liczba_alfanumeryczna</I>
        | <B>0x</B> <I>liczba_alfanumeryczna</I>
        | <I>liczba_rzeczywista</I>
        ;
<I>liczba_calkowita</I>
        : <I>CYFRA</I>
        | <I>liczba_calkowita</I> <I>CYFRA</I>
        ;
<I>liczba_alfanumeryczna</I>:
        : <I>LITERA</I>
        | <I>CYFRA</I>
        | <I>liczba_alfanumeryczna</I> <I>LITERA</I>
        | <I>liczba_alfanumeryczna</I> <I>CYFRA</I>
        ;
<I>liczba_rzeczywista</I>
        : <B>.</B> <I>liczba_calkowita</I>
        | <I>liczba_calkowita</I> <B>.</B> <I>liczba_calkowita</I>
        | <I>liczba_calkowita</I> <B>.</B> <I>liczba_calkowita</I> <B>e</B> liczba_calkowita
        | <I>liczba_calkowita</I> <B>.</B> <I>liczba_calkowita</I> <B>e-</B> liczba_calkowita
        ;
</PRE>
<UL>
  <LI>dla zadanej bazy wielkoœci B poprawnymi cyframi s¹:<BR>B &lt; 11 : 
  0..B-1<BR>B &gt;= 11 : 0..9 , B - 10 liter pocz¹wszy od A<BR>np: dla systemu 
  trójkowego: 0..2<BR>dla systemu dwunastkowego: 0..9, A, B<BR>dla systemu 
  dwudziestkowego 0..9, A..J<BR>
  <LI>w sta³ych liczbowych wielkoœæ liter nie jest rozró¿niana 
  <LI>przyk³ady sta³ych reprezentuj¹cych liczby ca³kowite <PRE>23              // liczba 23 w systemie dziesiêtnym
0xff            // liczba ff w systemie szesnastkowym, 
                // 255 dziesiêtnie
2#0010101       // liczba 10101 w systemie dwójkowym, 
                // 37 dziesiêtnie
20#AFH          // liczba AFH w systemie dwudziestkowym:
                // 10*20<SUP>2</SUP> +15*20<SUP>1</SUP> + 17*20<SUP>0</SUP>
                // = 4000 + 300 + 17 = 4317
3#203           // niepoprawna sta³a znakowa w systemie
                // trójkowym
</PRE>
  <LI>przyk³ady sta³ych reprezentuj¹cych liczby rzeczywiste <PRE>.1              // jedna dziesi¹ta: 0.1
3.15            // 3 i 15 setnych
50e-1           // 50 * 10<SUP>-1</SUP> = 50 * 0.1 = 5
2.6e2           // 2.6 * 10<SUP>2</SUP> = 2.6 * 100 = 260
</PRE></LI></UL>
<H3><A name=desc_char>2.5.3</A> Sta³e znakowe</H3>
<P>Sta³¹ znakow¹ jest znak alfanumeryczny lub specjajny wewn¹trz apostrofów, np: 
<B>'a'</B> , <B>'A'</B>, <B>'\n'</B> , <B>'\xa0'</B><BR>
<P>Sk³adnia:<PRE><I>sta³a_znakowa</I>
        : <B>'</B> ZNAK <B>'</B>
        ;
<A name=desc_char></A><I>ZNAK</I>
        : znak_alfanumeryczny
        | <B>\</B> znak_spec
        | <B>\x</B> liczba_szestnastkowa
        | <B>\0</B> liczba_osemkowa_3
        ;
</PRE>
<UL>
  <LI><A name=desc_alfa_char>2.5.3.1</A> znak_alfanumeryczny: ka¿dy znak 
  widoczny na ekranie 
  <LI><A name=desc_char_hex>2.5.3.2</A> <B>liczba_szestanstkowa</B><BR>liczba w 
  systemie szesnastkowym 
  <LI><A name=desc_char_oct_3>2.5.3.3</A> <B>liczba_osemkowa_3</B><BR>liczba w 
  systemie osemkowym o d³ugoœci nie wiêkszej ni¿ 3 znaki<BR>
  <LI><A name=desc_char_spec>2.5.3.4</A> <B>znak_spec</B><BR>
  <UL>
    <LI><B>n</B> - znak nowej linii 
    <LI><B>r</B> - znak powrotu karetki 
    <LI><B>t</B> - znak tabulacji poziomej 
    <LI><B>v</B> - znak tabulacji pionowej 
    <LI><B>b</B> - skasowanie poprzedniego znaku 
    <LI><B>a</B> - alarm 
    <LI><B>\</B> - backslash </LI></UL>Je¿eli po znaku <B>\</B> (backslash) 
  wyst¹pi znak który nie nale¿y do ¿adnej z podanych kategorii : znak specjalny, 
  liczba szesnastkowa lub ósemkowa to wstawiany jest ten znak. Przyk³ad: '\k' == 
  'k' , '\&amp;' == '&amp;'. </LI></UL>
<H3><A name=desc_text>2.5.4</A> Sta³e ³añcuchowe</H3>
<p>Sta³¹ ³añcuchow¹ - ³añcuchem tekstowym jest ka¿dy ci¹g znaków wewn¹trz cudzys³owiów (<b>"</b>).
<P>Sk³adnia:<PRE><I>sta³a_lancuchowa</I>
        : <B>"</B> znaki <B>"</B>
        ;
<A name=desc_char></A><I>znaki</I>
        : znaki ZNAK
		;
</pre>
<ul>
	<li>Aby w ³añcuchu tekstowym umieœciæ znak cudzys³owiu (<b>"</b>) nale¿y umieœciæ sekwencjê <b>\"</b>.
	<li>W ³añcucha tekstowego mog¹ wystêpowaæ fizyczne znaki nowej linii i s¹ one interpretowane jako nowe
	    linie.
	<li>W sta³ej tesktowej nie mo¿e wystêpowaæ znak <b>'\0'</b> poniewa¿ wewnêtrzna reprezentacja tych sta³ych
	    i ogólnie tekstów opiera siê na buforze zakoñcxzonym znakiem '\0'.
</ul>

<H3><A name=desc_identifier>2.5.5</A> Identyfikatory</H3>
<ul>
	<li>Identyfikator jest nazw¹ obiektu jêzyka - zmiennej lub typu. 
	<li>Identyfikator musi zaczynaæ siê od litery lub podkreœlinka)
	<li>Dalsze znaki ident\yfikatora to litery, cyfry lub podkreœlnik.
	<li>Rozró¿niana jest wielkoœæ liter.
	<li>Wyra¿enie regularne opisuj¹ce identyfikatory: 
	<pre>[_[:alpha:]][_[:digit:][:alpha:]]*</pre>
	Gdzie [:alpha:] i [:digit:] to odpowiednie dla konkretneej lokalozacji zestawy znaków : liter i cyfr.
</ul>
<P><A href="#toc">Zawartoœæ</A> </P></DIV>
<H1><A name=chapter_3>3.</A> Dzia³anie programu</H1>
<DIV class=tekst><A 
href="#toc">Zawartoœæ</A> </DIV>
<H1><A name=chapter_4>4.</A> Biblioteka standardowa</H1>
<DIV class=tekst>
<P>Ten rozdzia³ zawiera opis funkcji bibliotecznych dostêpnych wraz z 
implementacj¹ jêzyka. 
<H2><A name=sect_4_1>4.1</A> IO - wejœcie/wyjœcie</H2>
<P>Bibioteka IO dostêpna jest po w³¹czeniu pliku <B>io.xl</B>. Po w³¹czeniu 
pliku dostêpny jest obiekt <I>io</I> który udostêpnia metody dostêpu do funkcji 
wejœcia wyjœcia. 
<P>Spis metod obiektu <I>io</I> 
<H3><A name=desc_libio_basic_io>4.1.2</A> Podstawowe operacje wejœcia i 
wyjœcia</H3>
<P>
<DL>
  <DT><B>close</B>( <B>desc</B> ) 
  <DD>Zamyka strumieñ wskazany przez <B>desc</B>.<BR>Zwraca zero, lub -1 w razie 
  b³êdu. 
  <DT><B>feof</B>( <B>desc</B> ) 
  <DD>Sprawdza czy strumieñ <B>desc</B> ma ustawiony znaczni koñca 
  pliku.<BR>Zwraca prawde w przypadku gdy koniec pliku zosta³ osi¹gniêty, w 
  przeciwnym pezypadku fa³sz. </DD></DL>
<H3><A name=desc_libio_open>4.1.3</A> Otwieranie strumieni i plików</H3>
<P>
<DL>
  <DT><B>fopen</B>( <B>file_name</B>, <B>mode</B> = O_READ ) 
  <DD>Otwiera plik o nazwie <B>name</B> u¿ywaj¹c <B>mode</B> jako trybu otwarcia 
  pliku.<BR><B>mode</B> jest kombinacj¹ sta³ych <A 
  href="#desc_libio_open_mode">O_xxx</A>.<BR>Zwraca 
  identyfikator strumienia, lub 0 w razie b³êdu. 
  <DT><B>open</B>( <B>name</B>, <B>mode</B> = O_READ ) 
  <DD>Otwiera strumieñ opisany przez <B>name</B>.<BR>Zwraca identyfikator 
  strumienia, lub 0 w razie b³êdu. 
  <DT><B>sopen</B>( <B>host</B>, <B>port</B> ) 
  <DD>Otwiera po³¹czenie TCP/IP z hostem <B>host</B> do portu 
  <B>port</B>.<BR>Zwraca identyfikator strumienia, lub 0 w razie b³êdu. 
  <DT><B>popen</B>( <B>command</B>, <B>mode</B> = O_READ ) 
  <DD>Otwiera ³¹cze komunikacyjne z procesem wywo³anym przez polecenie 
  <B>command</B>. Kierunek po³¹czenie zale¿y od parametru <B>mode</B>: 
  <UL>
    <LI>O_READ : odczyt ze standardowego wyjœcia procesu potomnego 
    <LI>O_WRITE : zapis do standardowego wejœcia procesu potomnego 
  </LI></UL>Mo¿liwa jest kombinacja tych sta³ych, a tak¿e innych <A 
  href="#desc_libio_open_mode">O_xxx</A>.<BR>Zwraca 
  identyfikator strumienia, lub 0 w razie b³êdu. </DD></DL>
<H3><A name=desc_libio_text_io>4.1.4</A> Tekstowe operacje wejœcia i 
wyjœcia</H3>
<P>
<DL>
  <DT><B>gets</B>() 
  <DD>Odczytuje linie ze standardowego wejœcia.<BR>Zwraca wartoœæ tekstow¹ z 
  odczytanym tekstem. 
  <DT><B>fgets</B>( <B>desc</B> ) 
  <DD>Odczytuje linie ze strumienia wskazanego przez <B>desc</B>.<BR>Zwraca 
  wartoœæ tekstow¹ z odczytanym tekstem. 
  <DT><B>puts</B>( <B>text</B> ) 
  <DD>Wypisuje <B>text</B> na standardowe wyjœcie 
  <DT><B>fputs</B>( <B>desc</B>, <B>text</B> ) 
  <DD>Wypisuje <B>text</B> do strumienia wskazanego przez <B>desc</B>. 
  <DT><B>to_file</B>( <B>name</B>, <B>text</B>, <B>mode</B> = O_NEW ) 
  <DT><B>write_file</B> ( <B>name</B>, <B>text</B>, <B>mode</B> = O_NEW ) 
  <DD>Wypisuje <B>text</B> do nowo tworzonego (ewentualnie nadpisywango) pliku 
  <B>name</B> 
  <DT><B>from_file</B>( <B>name</B> ) 
  <DT><B>read_file</B>( <B>name</B> ) 
  <DD>Odczytuje zawartoœæ ca³ego pliku tekstowego <B>name</B> i zwraca jego 
  treœæ ako wartoœc tekstow¹. </DD></DL>
<H3><A name=desc_libio_open_mode>4.1.5</A> Tryb otwierania plików</H3>
<P>
<DL>
  <DT><B>O_READ</B> 
  <DD>Otwórz do odczytu. 
  <DT><B>O_WRITE</B> 
  <DD>Otwórz do zapisu. 
  <DT><B>O_APPEND</B> 
  <DD>Dopisuj na koñcu pliku. 
  <DT><B>O_CREAT</B> 
  <DD>Utwórz jeœli plik o podanej nazwie nie istnieje. 
  <DT><B>O_EXCL</B> 
  <DD>Nie otwieraj je¿eli plik o podanej nazwie istnieje. 
  <DT><B>O_TRUNC</B> 
  <DD>Je¿eli plik o podanej nazwie istnieje to obetnij go do d³ugoœci zero. 
  <DT><B>O_TEXT</B> 
  <DD>Ustaw tryb odczytu na tekstowy. Ma znaczenie tylko na niktórych 
  platformach. 
  <DT><B>O_BINARY</B> 
  <DD>Ustaw tryb odczytu na binarny. <BR>Ma znaczenie tylko na niktórych 
  platformach. 
  <DT><B>O_NODELAY</B> 
  <DD>Otwórz w trybie nieblokuj¹cym (asynchronicznym). <BR>Dostêpne tylko na 
  niektórych platformach. 
  <DT><B>O_NEW</B> 
  <DD>O_WRITE | O_TRUNC | O_CREAT <BR>Utwórz plik lub nadpisz istniej¹cy, a 
  potem otwórz do zapisu. </DD></DL>
<P>
<H3><A name=sect_4_2>4.2</A> SYSTEM - konwersjacja z systemem operacyjnym</H3>
<P>
<UL>
  <LI>sys.process 
  <UL>
    <LI>sys.process.spawn <B>NOT IMPLEMENTED</B> 
    <LI>sys.process.exec <B>NOT IMPLEMENTED</B> 
    <LI>sys.process.wait <B>NOT IMPLEMENTED</B> 
    <LI>sys.process.pid <B>NOT IMPLEMENTED</B> 
    <LI>sys.process.uid <B>NOT IMPLEMENTED</B> 
    <LI>sys.process.gid <B>NOT IMPLEMENTED</B> </LI></UL>
  <LI>sys.time 
  <UL>
    <LI>sys.time.get <B>NOT IMPLEMENTED</B> 
    <LI>sys.time.set <B>NOT IMPLEMENTED</B> 
    <LI>sys.time.get_file_modify <B>NOT IMPLEMENTED</B> 
    <LI>sys.time.get_file_access <B>NOT IMPLEMENTED</B> 
    <LI>sys.time.get_file_create <B>NOT IMPLEMENTED</B> 
    <LI>sys.time.time <B>NOT IMPLEMENTED</B> </LI></UL>
  <LI>sys.info 
  <UL>
    <LI>sys.info.name <B>NOT IMPLEMENTED</B> 
    <LI>sys.info.arch <B>NOT IMPLEMENTED</B> </LI></UL>
  <LI>sys.security 
  <UL>
    <LI>sys.security.user.name <B>NOT IMPLEMENTED</B> 
    <LI>sys.security.user.login <B>NOT IMPLEMENTED</B> 
    <LI>sys.security.user.home_directory <B>NOT IMPLEMENTED</B> 
    <LI>sys.security.user.uid <B>NOT IMPLEMENTED</B> 
    <LI>sys.security.user.gid <B>NOT IMPLEMENTED</B> </LI></UL></LI></UL>
<P><A href="#toc">Zawartoœæ</A> </P></DIV>
<H1><A name=chapter_5>5.</A> Przyk³ady</H1>
<DIV class=tekst><A 
href="#toc">Zawartoœæ</A> </DIV></DIV>
<TABLE bgColor=#7070f0 border=0 cellPadding=2 cellSpacing=0 width="100%">
  <TBODY>
  <TR>
    <TD align=left bgColor=#7070f0><FONT color=white><I>Design by <A 
      href="mailto:zzbigg@o2.pl"><B>Trurl</B></A></I></FONT> 
  </TD></TR></TBODY></TABLE><!--
</BODY></HTML>
