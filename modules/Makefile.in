######################################
#
# File		: Makefile.in
# Id            : $Id: Makefile.in 1.5 03/12/05 15:56:08+01:00 zbigg@zbigg.(none) $
# Author	: Zbigniew Zagorski <zzbigg@o2.pl>
# Type		: GNU Make
# Source type	: bunch of shared libraries
#
######################################
# Set of dynamic loaded modules
#
# Options
#	DEBUG=1		compile with debug information (default)
#	DEBUG=0		compile without debug information
#	PROF=1		compile with debug information
#	PROF=0		compile without debug information (default)
#	INST_DIR=dir	use dir as instalation directory
#			(default ).
#		By default:
#		* library is installed to $(INST_DIR)/lib/$(PACKAGE)
#
# Targets:
#    default	: Compile shared library.
#    inst	: Install libary to default place (/usr/lib).
#                 Require root access.
#    static	: Compile static linked library.
#    clean	: Remove all intermediate files .
#    clean_all	: Remove all including libary and depandency files.
#
######################################

PROFILE=@PROFILE@
SHARED=@SHARED@
SHARED_MODULES=@SHARED_MODULES@
DEBUG=@DEBUG@

SHARED_EXT=@SHARED_EXT@
STATIC_EXT=a
LIBNAME=@LIBNAME@
VERSION=@VERSION@
VERSION_MAJOR=@VERSION_MAJOR@
srcdir = @srcdir@
top_srcdir = @top_srcdir@
top_builddir = ..
LIBDIR=$(top_builddir)/lib
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

CC=@CC@
CPP = @CPP@
LD=@CC@
AR=ar
RANLIB=@RANLIB@
LN_S = @LN_S@
YACC = @YACC@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
DLLTOOL=@DLLTOOL@
mkinstalldirs = $(SHELL) $(top_srcdir)/misc/mkdirs.sh


#
#
# Confguration

AXL_WITH_ALLEGRO?=1

MODULES=cgi.c unix.c
EXTRA_INCLUDES=

ifeq (@ALLEGRO_ENABLED@,1)
MODULES += allegro.c
ALLEGRO_LIBS=@ALLEGRO_LIBS@
ALLEGRO_INCLUDE=@ALLEGRO_INCLUDE@
EXTRA_INCLUDES += @ALLEGRO_INCLUDE@
endif

ifeq (@MYSQL_ENABLED@,1)
# mysql module is not ready yet !!!
MODULES += mysql.c
MYSQL_LIBS=@MYSQL_LIBS@
MYSQL_INCLUDE=@MYSQL_INCLUDE@
EXTRA_INCLUDES += @MYSQL_INCLUDE@
endif

ifeq (@POSTGRESQL_ENABLED@,1)
MODULES += postgres.c
POSTGRESQL_LIBS=@POSTGRESQL_LIBS@
POSTGRESQL_INCLUDE=@POSTGRESQL_INCLUDE@
EXTRA_INCLUDES += @POSTGRESQL_INCLUDE@
endif

ifeq (@READLINE_ENABLED@,1)
READLINE_LIBS=@READLINE_LIBS@
MODULES += readline.c
endif

ifeq (@GD_ENABLED@,1)
GD_LIBS=@GD_LIBS@
MODULES += gd.c
endif

ifeq (@SQLITE_ENABLED@,1)
SQLITE_LIBS=@SQLITE_LIBS@
MODULES += sqlite.c
endif

CINCLUDE=-I$(top_srcdir)/common -I$(top_srcdir)/include -I$(top_builddir) -I$(srcdir)

CFLAGS=@DEFS@ @CFLAGS@ $(CINCLUDE)

# Flags for linker needed to build shared library
LDFLAGS=-shared -L$(LIBDIR) @MODULES_LIBS@


default: all modules.h

ifeq ($(SHARED_MODULES),yes)
LIBRARIES=$(MODULES:.c=.$(SHARED_EXT))
all: shared

inst_lib: inst_lib_shared

else
LIBRARIES=$(MODULES:.c=.o)

all: static

inst_lib:

endif

SOURCES=$(MODULES)
OBJECTS=$(MODULES:.c=.o)
PRODUCTS=$(LIBRARIES)

shared : $(LIBRARIES)
static  : $(LIBRARIES)

#
#	The main build
#

sqlite.$(SHARED_EXT)	: sqlite.o
	$(LD) $^ $(LDFLAGS)  $(SQLITE_LIBS) -o $@

gd.$(SHARED_EXT)	: gd.o
	$(LD) $^ $(LDFLAGS) $(GD_LIBS) -o xl_$@
	-mv xl_$@ $@

postgres.$(SHARED_EXT)	: postgres.o
	$(LD) $^ $(LDFLAGS) $(POSTGRESQL_LIBS) -o $@

readline.$(SHARED_EXT)	: readline.o
	$(LD) $^ $(LDFLAGS) $(READLINE_LIBS) -o xl_$@
	-mv xl_$@ $@

allegro.$(SHARED_EXT)	: allegro.o
	$(LD) $^ $(LDFLAGS) $(ALLEGRO_LIBS) -o $@

mysql.$(SHARED_EXT)	: mysql.o
	$(LD) $^ $(LDFLAGS)  $(MYSQL_LIBS) -o $@

postgres.o	: postgres.c
	$(CC) $(CFLAGS) $(POSTGRESQL_INCLUDE) -c  $< -o $@

mysql.o	: mysql.c
	$(CC) $(CFLAGS) $(MYSQL_INCLUDE) -c  $< -o $@

allegro.o	: allegro.c
	$(CC) $(CFLAGS)  $(ALLEGRO_INCLUDE) -c $< -o $@

MODULES_LIST=$(MODULES:.c=)

modules.h: Makefile
	@echo "/* generated by Makefile */" > modules.h
	@echo "ZMOD_BEGIN_USE_MODULE" >> modules.h
	@for MOD in $(MODULES_LIST) ; do \
	    echo "    ZMOD_USE_MODULE($$MOD)" >> modules.h; \
	done
	@echo "ZMOD_END_USE_MODULE" >> modules.h


%.$(SHARED_EXT)	: %.o
	$(LD) $^ $(LDFLAGS) $(CLIB) -o $@


#
# Installation
#
install: inst_dev

inst_lib_shared: $(LIBRARIES)
	$(mkinstalldirs) $(pkglibdir)
	@echo Installing AXL MODULES in $(pkglibdir)
	@for FILE in $(LIBRARIES) ; do \
	  echo -n "$$FILE "; \
	  $(INSTALL) $$FILE $(pkglibdir)/ ; \
	done
	@echo
	$(mkinstalldirs) $(pkglibdir)
	@echo -n "Installing AXL INCLUDES in $(pkglibdir) : "
	@for FILE in `find $(srcdir)/axlinc | grep -E -v "(SCCS|CVS|{arch})" | sed -e "s#$(srcdir)/axlinc/##"`; do \
		if test -f $(srcdir)/axlinc/$$FILE  ; then  	\
			echo -n "$$FILE " ; 				\
			DIR=$(pkglibdir)/`dirname $$FILE` ; 	\
			$(mkinstalldirs) $$DIR ; 			\
			$(INSTALL_DATA) $(srcdir)/axlinc/$$FILE $$DIR ;  \
		fi ; \
	done
	@echo . Done.

inst_dev: inst_lib

inst_inc:

inst_doc : doc
	@echo Installing documentation
	@echo WARNING: nothing done

doc:
	@echo Making documentation
	@echo Here put your code that creates documentation in doc/
	@echo WARNING: nothing done

#
# Cleaning
#
clean:
	rm -f $(OBJECTS) *.o

clean_all: clean
	-rm -f $(PRODUCTS)
	-rm -f *.d *.bak *.~*
	-rm -f core* *.so *.so.* *.a *.~*

distclean: clean_all
	rm -f Makefile



#
# Keep Makefile recent
#

${top_builddir}/config.h: ${top_srcdir}/config.h.in
	@echo Rebuilding config.h
	(cd $(top_builddir) ; ./config.status ; )

${top_srcdir}/configure  $(top_builddir)/config.status: ${top_srcdir}/configure.in
	@echo Rebuilding configure
	(cd ${top_srcdir}; autoconf ; )
	(cd ${top_builddir}; ./config.status --recheck ; )

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@echo Makefile.in or configure changed, must reconfigure
	(cd $(top_builddir) ; ./config.status ; )


-include $(OBJECTS:.o=.d)
