#!/usr/bin/axl
#
# File:		std/time
#
# $Id: time 1.4 04/05/22 20:11:42+02:00 zbigg@veinard.dom $
#
# Copyright:
#
#   This program is Copyright(c) Zbigniew Zagorski 1999-2002, 
#   All rights reserved, and is distributed as free software under the 
#   license in the file "LICENSE", which is included in the distribution.
#
#	$Log: <Not implemented> $
#	Revision 1.8  2002/12/10 15:05:08  trurl
#	MOD: replacing std with axl as top object of standard library
#	
#	Revision 1.7  2002/10/07 18:37:09  trurl
#	ADD: empty description for module in documentation
#	
#	Revision 1.6  2002/10/04 00:29:52  trurl
#	FIX: manual: fixed synopsis sections for better display
#	
#	Revision 1.5  2002/09/25 20:21:13  trurl
#	Added $Id: time 1.4 04/05/22 20:11:42+02:00 zbigg@veinard.dom $ tags.
#	
#	Revision 1.4  2002/09/21 00:05:45  trurl
#	*** empty log message ***
#	
#	Revision 1.3  2002/09/21 00:00:58  anoncvs
#	Added description of std.time.local().fmt() formatting
#	
#	Revision 1.2  2002/09/20 23:29:14  anoncvs
#	Added primary version of documentation.
#	
#
#############################################
##
##	=Module	stdAXL Time
##
##
##	Here you will se the description of the stdAXL Time module.
##
##
#############################################
##
##	=Function axl.time.local
##		get time_object for current time in local timezone
##	
##	=Synopsis
##	|include "stdtime";
##	|
##	|object axl.time.local( timestamp = axl.time.stamp() );
##
##	=Description
##	
##	local() returns reference to time_object containig current 
##	local time representation for timestamp which defaults to current. 
##
##	Fields of returned object:
##	  * integer <year> -	year in full form (1999 not 99, 2002 no 02)
##	  * integer <month> -	month in range [1 .. 12]
##	  * integer <day> -	day in month in range [1 .. 31]
##	  * integer <day_of_week> -	day in week in range [0 .. 6], 
##					Sunday is 0
##	  * integer <day_of_year> -	day of year since 1st of 
##					January [0 .. 365]
##	  * integer <hour>   -	hour [0 .. 23]
##	  * integer <minute> -	minute [0 .. 59]
##	  * integer <second> -	seconds [0 .. 59]
##	
##	Methods of returned object
##	  * integer stamp() -	returns timestamp representaion of time
##				stored in object fields

##	  * string  strftime(string fmt) - formats time using <fmt>. 
##				See _formatting_ time.

##	  * string  fmt(string fmt) - formats time using <fmt>. 
##				See _formatting_ time.
##	  * string  asctime() -
##		     returns standard time/date representation
##		     for current locale.
##
##	=Formatting
##
##	  The fmt() and strftime() methods of <time_object> use format
##	  string format which is exactly the same as format string in
##	  strftime function in ANSI C standard. 

##	  Ordinary  characters  placed  in  the  format string are copied to s
##        without conversion.  Conversion specifiers are introduced by  a  `%'
##        character, and are replaced in s as follows:
##      * %a  -   The abbreviated weekday name according to the current locale.

##      * %A  -   The full weekday name according to the current locale.

##      *  %b -    The abbreviated month name according to the current locale.

##      *  %B -    The full month name according to the current locale.

##      *  %c -    The preferred date and time representation  for  the  current
##               locale.

##      *  %C -    The century number (year/100) as a 2-digit integer. (SU)

##      *  %d -    The day of the month as a decimal number (range 01 to 31).

##      *  %D -    Equivalent  to %m/%d/%y. (Yecch - for Americans only.  
##		Americans should note that in other countries %d/%m/%y  is  rather
##		common.  This means that in international context this format
##		is ambiguous and should not be used.) (SU)

##      * %e  -   Like %d, the day of the month as  a  decimal  number,  but  a
##		leading zero is replaced by a space. (SU)

##      * %E  -   Modifier: use alternative format, see below. (SU)

##      * %G  -   The  ISO  8601  year  with  century as a decimal number.  The
##		4-digit year corresponding to the ISO week number  (see  %V).
##		This  has the same format and value as %y, except that if the
##		ISO week number belongs to the previous or  next  year,  that
##		year is used instead. (TZ)

##	* %g  -   Like  %G,  but  without  century,  i.e.,  with a 2-digit year
##		(00-99). (TZ)

##      * %h  -   Equivalent to %b. (S)

##      * %H  -   The hour as a decimal number using a 24-hour clock (range  00
##		to 23).

##      * %I  -   The  hour as a decimal number using a 12-hour clock (range 01
##		to 12).

##      * %j  -   The day of the year as a decimal number (range 001 to 366).

##      * %k  -   The hour (24-hour clock) as a decimal number (range 0 to 23);
##		single digits are preceded by a blank. (See also %H.) (TZ)

##      * %l  -   The hour (12-hour clock) as a decimal number (range 1 to 12);
##        single digits are preceded by a blank. (See also %I.) (TZ)

##      * %m  -   The month as a decimal number (range 01 to 12).

##      * %M  -   The minute as a decimal number (range 00 to 59).

##      * %n  -   A newline character. (SU)

##      * %O  -   Modifier: use alternative format, see below. (SU)

##      * %p  -   Either `AM' or `PM' according to the given time value, or the
##		corresponding  strings  for  the  current  locale.   Noon  is
##		treated as `pm' and midnight as `am'.

##      * %P  -   Like %p but in lowercase: `am' or  `pm'  or  a  corresponding
##		string for the current locale. (GNU)

##      * %r  -   The  time in a.m. or p.m. notation.  In the POSIX locale this
##		is equivalent to `%I:%M:%S %p'. (SU)

##      * %R  -   The time in 24-hour notation  (%H:%M).  (SU)  For  a  version
##		including the seconds, see %T below.

##      * %s  -   The number of seconds since the Epoch, i.e., since 1970-01-01
##		00:00:00 UTC. (TZ)

##      * %S  -   The second as a decimal number (range 00 to 61).

##      * %t  -   A tab character. (SU)

##      * %T  -   The time in 24-hour notation (%H:%M:%S). (SU)

##      * %u  -   The day of the week as a decimal, range 1 to 7, Monday  being
##		1.  See also %w. (SU)

##      * %U  -   The  week  number  of  the  current year as a decimal number,
##		range 00 to 53, starting with the first Sunday as  the  first
##		day of week 01. See also %V and %W.

##      * %V  -   The  ISO 8601:1988 week number of the current year as a 
##		decimal number, range 01 to 53, where week 1 is  the  first  week
##		that has at least 4 days in the current year, and with Monday
##		as the first day of the week. See also %U and %W. (SU)

##      * %w  -   The day of the week as a decimal, range 0 to 6, Sunday  being
##		0.  See also %u.

##      * %W  -   The  week  number  of  the  current year as a decimal number,
##		range 00 to 53, starting with the first Monday as  the  first
##		day of week 01.

##      * %x  -   The  preferred  date  representation  for  the current locale
##		without the time.

##      * %X  -   The preferred time  representation  for  the  current  locale
##		without the date.

##      * %V  -   The  ISO 8601:1988 week number of the current year as a decimal 
##	  	number, range 01 to 53, where week 1 is  the  first  week
##        	that has at least 4 days in the current year, and with Monday
##        	as the first day of the week. See also %U and %W. (SU)

##      * %w  -   The day of the week as a decimal, range 0 to 6, Sunday  being
##        	0.  See also %u.

##      *  %W -    The  week  number  of  the  current year as a decimal number,
##        	range 00 to 53, starting with the first Monday as  the  first
##        	day of week 01.

##      *  %x -    The  preferred  date  representation  for  the current locale
##        	without the time.

##      *  %X -    The preferred time  representation  for  the  current  locale
##        	without the date.

##      *  %y -    The  year  as a decimal number without a century (range 00 to
##        	99).

##      *  %Y -    The year as a decimal number including the century.

##      *  %z -    The time-zone as hour offset  from  GMT.   Required  to  emit
##        	RFC822-conformant  dates  (using "%a, %d %b %Y %H:%M:%S %z").
##        (GNU)

##      *  %Z -    The time zone or name or abbreviation.

##      *  %+ -    The date and time in date(1) format. (TZ)

##      *  %% -    A literal `%' character.
##        
#############################################
##
##	=Function axl.time.gmt
##		get time object for current time in GMT	
##
##	=Synopsis
##	|include "stdtime";
##	|
##	|object axl.time.gmt( timestamp = axl.time.stamp() );
##
##	=Description
##
##	gmt() returns reference to time_object containig current 
##	Greenwich Time representation for time which defaults to current. 
##
##	See axl.time.local() for description of returned object.
##
#############################################
##
##	=Function axl.time.stamp
##		get current timestamp	
##
##	=Synopsis
##	|include "stdtime";
##	|
##	|object axl.time.stamp( );
##	|object axl.time.time( );
##
##	=Description
##	stamp() and time()  returns the time since the Epoch (00:00:00 UTC, 
##	January 1, 1970), measured in seconds. It's an integer number. 
##
#############################################
##
##	=Function axl.time.file_modify_stamp
##		get file last modification timestamp
##	=Synopsis
##	|include "stdtime";
##	|
##	|integer axl.time.file_modify_stamp( string filename);
##
##	=Description
##
##	Returns the file modification timestamp. Timestamp is the time 
##	since the Epoch (00:00:00 UTC, January 1, 1970), measured in 
##	seconds. It's an integer number. 
##
#############################################
##
##	=Function axl.time.file_access_stamp
##		get file last access timestamp
##	=Synopsis
##	|include "stdtime";
##	|
##	|integer axl.time.file_access_stamp( string filename);
##
##	=Description
##
##	Returns the file access timestamp. Timestamp is the time 
##	since the Epoch (00:00:00 UTC, January 1, 1970), measured in 
##	seconds. It's an integer number. 
##
#############################################

if( ! _std_time_included ) {
    if( !std )
        axl = std = new;
    _std_time_included = 1;
    axl.time = (builtin "stdaxl:create_time_object") ();

}; // force single include
